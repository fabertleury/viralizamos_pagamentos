// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema for the payment system - estrutura exata do banco existente

/// Estrutura da tabela payment_request existente no banco de dados
model PaymentRequest {
  id                   String    @id @default(uuid())
  token                String    @unique
  amount               Float
  service_id           String?
  profile_username     String?
  customer_email       String
  customer_name        String
  customer_phone       String?
  service_name         String?
  return_url           String?
  status               String    @default("pending") // pending, processing, completed, expired, cancelled, failed
  processed_payment_id String?
  additional_data      String?   // JSON string
  created_at           DateTime  @default(now())
  expires_at           DateTime?
  processed_at         DateTime?

  // Relations
  payments             Payment[]
  
  @@map("payment_request")
  @@index([token])
  @@index([status])
  @@index([service_id])
  @@index([created_at])
}

model Payment {
  id                 String    @id @default(uuid())
  payment_request_id String
  payment_request    PaymentRequest @relation(fields: [payment_request_id], references: [id])
  provider           String    // mercadopago, pagseguro, etc.
  provider_payment_id String?
  status             String    // pending, completed, failed, cancelled, refunded, disputed
  method             String    // pix, credit_card, boleto, etc.
  amount             Float
  pix_code           String?
  pix_qrcode         String?
  extra_data         String?   // JSON string
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relations
  notifications      Notification[]

  @@map("payment")
  @@index([payment_request_id])
  @@index([provider, provider_payment_id])
  @@index([status])
  @@index([created_at])
}

model Notification {
  id          String   @id @default(uuid())
  payment_id  String?
  payment     Payment? @relation(fields: [payment_id], references: [id])
  type        String  // mercadopago_webhook, system, etc.
  data        String  // JSON string com os dados da notificação
  created_at  DateTime @default(now())

  @@map("notification")
  @@index([payment_id])
  @@index([type])
  @@index([created_at])
}
