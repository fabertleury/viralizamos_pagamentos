import { PrismaClient } from '@prisma/client';

// ===== CONFIGURA√á√ÉO DE CONEX√ÉO FOR√áADA =====
// Em produ√ß√£o na Railway, verificamos se estamos com a URL correta
// ou for√ßamos a URL correta para a inst√¢ncia PostgreSQL da Railway
if (process.env.NODE_ENV === 'production') {
  const railwayDbUrl = "postgresql://postgres:zacEqGceWerpWpBZZqttjamDOCcdhRbO@shinkansen.proxy.rlwy.net:29036/railway";
  
  if (!process.env.DATABASE_URL || process.env.DATABASE_URL.includes('localhost')) {
    console.log('‚ö†Ô∏è ATEN√á√ÉO: DATABASE_URL incorreta ou n√£o definida em produ√ß√£o, corrigindo...');
    process.env.DATABASE_URL = railwayDbUrl;
  }
  
  // Log seguro (sem mostrar a senha completa)
  const currentUrl = process.env.DATABASE_URL;
  const maskedUrl = currentUrl.replace(/\/\/([^:]+:)([^@]+)@/, '//***:***@');
  console.log(`‚ÑπÔ∏è [${process.env.NODE_ENV}] Usando DATABASE_URL: ${maskedUrl}`);
} else {
  console.log(`‚ÑπÔ∏è [${process.env.NODE_ENV}] Ambiente de desenvolvimento`);
}

// Configura√ß√µes do Prisma
const prismaClientSingleton = () => {
  try {
    // Em ambiente de desenvolvimento, pode usar um fallback
    if (!process.env.DATABASE_URL && process.env.NODE_ENV !== 'production') {
      console.log('‚ö†Ô∏è DATABASE_URL n√£o definida em desenvolvimento, usando fallback');
      process.env.DATABASE_URL = "postgresql://postgres:postgres@localhost:5432/viralizamos_pagamentos";
    }
    
    // Em produ√ß√£o, DATABASE_URL deve estar definida corretamente
    if (!process.env.DATABASE_URL) {
      throw new Error(`DATABASE_URL n√£o est√° definida no ambiente ${process.env.NODE_ENV}`);
    }
    
    // Valida√ß√£o adicional para produ√ß√£o
    if (process.env.NODE_ENV === 'production' && process.env.DATABASE_URL.includes('localhost')) {
      throw new Error('DATABASE_URL est√° apontando para localhost em ambiente de produ√ß√£o');
    }
    
    console.log('üîå Inicializando conex√£o com o banco de dados...');
    return new PrismaClient({
      log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
      errorFormat: 'pretty',
    });
  } catch (error) {
    console.error('‚ùå ERRO FATAL ao inicializar Prisma Client:', error);
    throw error;
  }
};

// Tipo global para o Prisma
type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

// Vari√°vel global para evitar m√∫ltiplas inst√¢ncias em desenvolvimento
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

// Exportar o cliente do Prisma
export const db = globalForPrisma.prisma ?? prismaClientSingleton();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db;

// Validar a conex√£o imediatamente
db.$connect()
  .then(() => console.log('‚úÖ Conex√£o com o banco de dados estabelecida!'))
  .catch(err => {
    console.error('‚ùå ERRO ao conectar com o banco de dados:', err);
    
    // Em produ√ß√£o, tentar reiniciar com a URL correta
    if (process.env.NODE_ENV === 'production') {
      console.log('üîÑ Tentando reconectar com a URL correta da Railway...');
      process.env.DATABASE_URL = "postgresql://postgres:zacEqGceWerpWpBZZqttjamDOCcdhRbO@shinkansen.proxy.rlwy.net:29036/railway";
    }
  }); 